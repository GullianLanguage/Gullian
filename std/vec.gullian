import std.mem
import std.err

struct Vector[T] {
    length: int,
    items: &T
}

struct VectorIterator[T] {
    vector: &Vector[T],
    index: int
}

enum VectorError {
    StopIteration,
    IndexError,
}

fun VectorError.to_string(self: VectorError) : str {
    return switch self {
        VectorError.StopIteration: "StopIteration",
        VectorError.IndexError: "IndexError",
        _: "(?VectorError?)",
    }
}

fun VectorIterator.next[T](self: &VectorIterator[T]) : err.Result[T, VectorError] {
    if self.index < self.vector.length {
        let item = self.vector.items[self.index]
        self.index += 1

        return err.ok[T, VectorError](item)
    }

    return err.fail[T, VectorError](VectorError.StopIteration)
}

fun Vector.has[T](self: &Vector[T], item: T) : bool {
    let index = 0

    while index < self.length {
        if self.items[index] == item {
            return true
        }
        
        index += 1
    }

    return false
}

fun Vector.push[T](self: &Vector[T], item: T) : void {
    self.length += 1
    self.items = mem.realloc(self.items, self.length * T)
    self.items[self.length -1] = item
}

fun Vector.pop[T](self: &Vector[T]) : err.Result[T, VectorError] {
    if self.length <= 0 {
        return err.fail[T, VectorError](VectorError.IndexError)
    }

    self.length -= 1

    let item = self.items[self.length]
    self.items = mem.realloc(self.items, self.length * T)

    return err.ok[T, VectorError](item)
}

fun Vector.iter[T](self: &Vector[T]) : VectorIterator[T] {
    return VectorIterator[T] { self, 0 }
}

fun new[T](item: T) : Vector[T] {
    let items: &T = mem.malloc(T)
    items[0] = item

    return Vector[T] { 1, items }
}
