extern fun exit(code: int) : void

import std.io
import std.fmt

union Result[T, E] {
    ok: T,
    err: E
}

fun panic(message: str) : void {
    io.puts("\\x1B[31mpanic\\x1B[36m: ".cat(message).cat("\\x1B[0m"))
}

fun Result.unwrap[T, E](self: Result[T, E]) : T {
    if self.ok? {
        return self.ok
    }

    if self.err? {
        panic(self.err.to_string())
    }

    exit(-1)
}

fun Result.to_string[T, E](self: Result[T, E]) : str {
    if self.ok? {
        return "Result { ok: ".cat(self.ok.to_string()).cat(" }")
    }

    if self.err? {
        return "Result { err: ".cat(self.err.to_string()).cat(" }")
    }

    return "error"
}

fun ok[T, E](value: T) : Result[T, E] {
    return Result[T, E] {
        ok: value
    }
}

fun fail[T, E](error: E) : Result[T, E] {
    return Result[T, E] {
        err: error
    }
}