extern fun strlen(string: str) : int
extern fun sprintf(buffer: str, fmt: str, arg: any) : void
extern fun atoi(string: str) : int

import std.mem

fun str.len(self: str) : int {
    return strlen(self)
}

fun str.clone(self: str) : str {
    let buffer_size = self.len() +1
    let buffer: str = mem.malloc(buffer_size)

    mem.memcpy(buffer, self, buffer_size)

    return buffer
}

fun cat(a: str, b: str) : str {
    let len_a = a.len()
    let len_b = b.len()
    let len_a_b = len_a + len_b

    let c: ptr = mem.malloc(len_a_b +1)

    mem.memcpy(c, a, len_a)
    mem.memcpy(c + len_a, b, len_b)

    c[len_a_b] = 0

    return c
}

fun u8.to_string(self: int) : str {
    if self == 0 {
        return "0"
    }

    let buffer: str = mem.malloc(4)

    sprintf(buffer, "%u", self)

    return buffer
}

fun u16.to_string(self: int) : str {
    if self == 0 {
        return "0"
    }

    let buffer: str = mem.malloc(8)

    sprintf(buffer, "%hu", self)

    return buffer
}

fun bool.to_string(self: bool) : str {
    if self {
        return "true"
    }

    return "false"
}

fun int.to_string(self: int) : str {
    if self == 0 {
        return "0"
    }

    let buffer: str = mem.malloc(21)

    sprintf(buffer, "%i", self)

    return buffer
}

fun float.to_string(self: float) : str {
    if self == 0.0 {
        return "0.0"
    }

    let buffer: str = mem.malloc(318)

    sprintf(buffer, "%f", self)

    return buffer
}

fun str.cat(self: str, value: str) : str {
    return cat(self, value)
}

fun str.to_string(self: str) : str {
    return self
}

fun str.to_int(self: str) : int {
    return atoi(self)
}

fun char.to_string(self: char) : str {
    let buffer: str = mem.malloc(1 +1)
    buffer[0] = self
    buffer[1] = 0

    return buffer
}