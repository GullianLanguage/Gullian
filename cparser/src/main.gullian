import std.io
import std.err
import std.fmt

enum TokenKind {
	LeftBrace,
	RightBrace,
	LeftBracket,
	RightBracket,
	NotEqual,
	Equal,
	LessThan,
	GreaterThan,
}

fun TokenKind.to_string(self: TokenKind) : str {
	return switch self {
		TokenKind.LeftBrace: "TokenKind.LeftBrace",
		TokenKind.RightBrace: "TokenKind.RightBrace",
		TokenKind.LeftBracket: "TokenKind.LeftBracket",
		TokenKind.RightBracket: "TokenKind.RightBracket",
		TokenKind.NotEqual: "TokenKind.NotEqual",
		TokenKind.Equal: "TokenKind.Equal",
		TokenKind.LessThan: "TokenKind.LessThan",
		TokenKind.GreaterThan: "TokenKind.GreaterThan",
		_: "..."
	}
}

enum KeywordKind {
	Typedef,
	Struct,
	Enum,
	Union
}

fun KeywordKind.to_string(self: KeywordKind) : str {
	return switch self {
		KeywordKind.Typedef: "KeywordKind.Typedef",
		KeywordKind.Struct: "KeywordKind.Struct",
		KeywordKind.Enum: "KeywordKind.Enum",
		KeywordKind.Union: "KeywordKind.Union",
		_: "..."
	}
}

struct Name {
	value: str,
}

fun Name.to_string(self: Name) : str {
	return self.value.clone()
}

union Literal {
	as_str: str,
	as_bool: bool,
	as_int: int,
	as_float: float,
}

fun Literal.to_string(self: Literal) : str {
	if self.as_str? {
		return self.as_str.clone()
	}

	if self.as_bool? {
		return self.as_bool.to_string()
	}

	if self.as_int? {
		return self.as_int.to_string()
	}

	if self.as_float? {
		return self.as_float.to_string()
	}

	err.panic("<unknown>")
}

union AnyToken {
	token: TokenKind,
	keyword: KeywordKind,
	literal: Literal,
	name: Name,
}

fun AnyToken.to_string(self: AnyToken) : str {
	if self.token? {
		return self.token.to_string()
	}

	if self.keyword? {
		return self.keyword.to_string()
	}

	if self.literal? {
		return self.literal.to_string()
	}

	if self.name? {
		return self.name.to_string()
	}

	err.panic("<unknown>")
}


struct Lexer {
	source: str,
	index: int,
}

fun Lexer.new(source: str) : Lexer {
	return Lexer {
		source,
		0,
	}
}

fun Lexer.iter(self: ptr[Lexer]) : ptr[Lexer] {
	return self
}

fun Lexer.scan_name(self: ptr[Lexer]) : err.Result[AnyToken, str] {                                       
}

fun Lexer.next(self: ptr[Lexer]) : err.Result[AnyToken, str] {
	let token: int = self.source[self.index]
        self.index += 1

	io.puts('token: '.cat(token.to_string()).cat(' index:'.cat(self.index.to_string())))

	if token == 0 {
		return err.fail[AnyToken, str]("<stopiteration>")
	}

	if token == 61 {
		return err.ok[AnyToken](AnyToken { token: TokenKind.Equal })
	}

	if ((token >= 97) and (token <= 122)) or ((token >= 65) and (token <= 90)) {
		return self.scan_name()
	}

	return err.ok[AnyToken](AnyToken { token: TokenKind.LeftBrace })
}

fun main() : int {
	let token = AnyToken { literal: Literal { as_float: 50 }}

	let lexer = Lexer.new("int x = 50")


	for token in lexer {
		io.puts(token.to_string())
	}

	io.puts("<end>")
}
