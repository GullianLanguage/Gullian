import std.io
import std.err
import std.fmt

enum TokenKind {
	LeftBrace,
	RightBrace,
	LeftBracket,
	RightBracket,
}

fun TokenKind.to_string(self: TokenKind) : str {
	return switch self {
		TokenKind.LeftBrace: "TokenKind.LeftBrace",
		TokenKind.RightBrace: "TokenKind.RightBrCe",
		TokenKind.LeftBracket: "TokenKind.LeftBracket",
		TokenKind.RightBracket: "TokenKind.RightBracket",
		_: "..."
	}
}

enum KeywordKind {
	Typedef,
	Struct,
	Enum,
	Union
}

fun KeywordKind.to_string(self: KeywordKind) : str {
	return switch self {
		KeywordKind.Typedef: "KeywordKind.Typedef",
		KeywordKind.Struct: "KeywordKind.Struct",
		KeywordKind.Enum: "KeywordKind.Enum",
		KeywordKind.Union: "KeywordKind.Union",
		_: "..."
	}
}

struct Name {
	value: str,
}

fun Name.to_string(self: Name) : str {
	return self.value.clone()
}

union Literal {
	as_str: str,
	as_bool: bool,
	as_int: int,
	as_float: float,
}

union AnyToken {
	token: TokenKind,
	keyword: KeywordKind,
	literal: Literal,
	name: Name,
}

fun AnyToken.to_string(self: AnyToken) : str {
	if self.token? {
		return self.token.to_string()
	}

	if self.keyword? {
		return self.keyword.to_string()
	}

	err.panic("<unknown>")
}

fun main() : int {
	let banana: ptr = "banana"
	let banana_clone: ptr = "banana".clone()

	io.puts("string: ".cat(banana).cat(", address: ").cat(int.to_string(banana)))
	io.puts("string: ".cat(banana_clone).cat(", address: ").cat(int.to_string(banana_clone)))
}
